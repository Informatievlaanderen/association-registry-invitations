name: Build image

on:
  workflow_call:
    inputs:
      run-docker-acm:
        required: true
        type: boolean
      run-docker-wiremock:
        required: true
        type: boolean
      run-docker-db:
        required: true
        type: boolean
      run-docker-elasticsearch:
        required: true
        type: boolean
      pre-gen-marten:
        type: boolean
      build-target:
        required: true
        type: string
      image-file: #ar-acm-api-image.tar
        required: true
        type: string
      image-name: #acm-api
        required: true
        type: string
      test-project: #AssociationRegistry.Test.Acm.Api
        required: true
        type: string
      build-project: #AssociationRegistry.Acm.Api/
        required: true
        type: string
      semver:
        required: true
        type: string

jobs:
  build-image:
    runs-on: ubuntu-latest

    steps:
      - name: Check version
        shell: bash
        run: echo $SEMVER
        env:
          SEMVER: ${{ inputs.semver }}

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run es container
        shell: bash
        if: ${{ inputs.run-docker-elasticsearch }}
        run: |
          docker run -d --name elasticsearch -p 9200:9200 -e ELASTIC_PASSWORD=local_development -e discovery.type=single-node -e xpack.security.transport.ssl.enabled=false docker.elastic.co/elasticsearch/elasticsearch:8.4.3

      - name: Run wiremock container
        shell: bash
        if: ${{ inputs.run-docker-wiremock }}
        run: |
          docker run -d --name wiremock -v ${{ github.workspace }}/wiremock:/home/wiremock -p 8080:8080 wiremock/wiremock:2.35.0-1 --global-response-templating --verbose

      - name: Run ACM container
        shell: bash
        if: ${{ inputs.run-docker-acm }}
        run: |
          docker run -d --name acm -p 5051:80 -v ${{ github.workspace }}/identityserver:/home/identityserver ghcr.io/informatievlaanderen/identity-server-fake:1284967

      - name: Run db container
        shell: bash
        if: ${{ inputs.run-docker-db }}
        run: |
          docker run -d --name db -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=root -e POSTGRES_DB=verenigingsregister postgres:15.0

      - name: Cache Paket
        uses: actions/cache@v3
        env:
          cache-name: cache-paket
        with:
          path: packages
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('paket.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ secrets.VBR_DOTNET_VERSION }}

      - name: .NET version
        shell: bash
        run: dotnet --info

      - name: Clean
        run: dotnet nuget locals all --clear

      - name: Restore dotnet tools
        shell: bash
        run: |
          dotnet tool restore

      - name: Paket install
        shell: bash
        run: dotnet paket install

      - name: Paket restore
        shell: bash
        run: dotnet paket restore

      - name: Dotnet restore tests
        shell: bash
        run: dotnet restore test/${{ inputs.test-project }} --runtime linux-x64

      - name: Dotnet build tests
        shell: bash
        run: dotnet build --no-restore --runtime 'linux-x64' test/${{ inputs.test-project }}

      - name: Wait for db container
        shell: bash
        run: |
          timeout 90s bash -c "until docker exec db pg_isready ; do sleep 5 ; done"

      - name: Run all tests
        env:
          LIVEMAGDAOPTIONS__CLIENTCERTIFICATE: ${{ secrets.LIVEMAGDAOPTIONS_CLIENTCERTIFICATE }}
          LIVEMAGDAOPTIONS__CLIENTCERTIFICATEPASSWORD: ${{ secrets.LIVEMAGDAOPTIONS_CLIENTCERTIFICATEPASSWORD }}
          LIVEMAGDAOPTIONS__GEEFONDERNEMINGENDPOINT: ${{ secrets.LIVEMAGDAOPTIONS_GEEFONDERNEMINGENDPOINT }}
          LIVEMAGDAOPTIONS__AFZENDER: ${{ secrets.LIVEMAGDAOPTIONS_AFZENDER }}
          LIVEMAGDAOPTIONS__HOEDANIGHEID: ${{ secrets.LIVEMAGDAOPTIONS_HOEDANIGHEID }}
          LIVEMAGDAOPTIONS__ONTVANGER: ${{ secrets.LIVEMAGDAOPTIONS_ONTVANGER }}
        run: dotnet test test/${{ inputs.test-project }} --logger html

      - name: Archive code coverage results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: ${{matrix.projects}}/TestResults/*.html

      - name: Dotnet restore
        shell: bash
        run: dotnet restore src/${{ inputs.build-project }} --runtime linux-x64

      - name: Set solution info
        shell: bash
        if: inputs.semver != 'none'
        run: CI_BUILD_NUMBER=$SEMVER ./build.sh SetSolutionInfo
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          SEMVER: ${{ inputs.semver }}

      - name: Pre-build Marten models
        if: ${{ inputs.pre-gen-marten }}
        shell: bash
        run: dotnet run --project src/${{ inputs.build-project }} -- codegen write


      - name: Dotnet build
        shell: bash
        run: dotnet build --no-restore --runtime 'linux-x64' --self-contained -f net6.0 src/${{ inputs.build-project }}

      - name: Dotnet publish
        shell: bash
        run: dotnet publish -o dist/${{ inputs.build-project }}/linux --no-build --no-restore --runtime 'linux-x64' --self-contained -f net6.0 src/${{ inputs.build-project }}

      - name: Containerize Api
        shell: bash
        run: CI_BUILD_NUMBER=$SEMVER ./build.sh ${{ inputs.build-target }}
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          SEMVER: ${{ inputs.semver }}

      - name: Show images
        shell: bash
        run: docker images

      - name: Save Api Image
        if: inputs.semver != 'none'
        shell: bash
        run: docker image save $BUILD_DOCKER_REGISTRY/association-registry/${{ inputs.image-name }}:$SEMVER -o ~/${{ inputs.image-file}}
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          SEMVER: ${{ inputs.semver }}

      - name: Upload Api artifact
        if: inputs.semver != 'none'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.image-name }}
          path: ~/${{ inputs.image-file }}

      - name: Shows logs ACM container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs acm

      - name: Shows logs elasticsearch container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs elasticsearch

      - name: Shows logs wiremock container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs wiremock

      - name: Shows logs db container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs db
