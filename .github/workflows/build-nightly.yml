name: Nightly Build

on:
  workflow_dispatch: 
  schedule:
    - cron: '0 0 * * *' # Runs every night at midnight UTC

jobs:

  set-release-version:
    if: github.repository_owner == 'Informatievlaanderen'
    name: Decide next version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Set Release Version
        id: set-version
        run: |
          echo $(date +%Y).$(date +%m).$(date +%d) > semver
          echo $(cat semver)
          echo ::set-output name=version::$(cat semver)
          echo RELEASE_VERSION=$(cat semver) >> $GITHUB_ENV
        shell: bash

  build-invitations-api:
    if: github.repository_owner == 'informatievlaanderen' && needs.set-release-version.outputs.version != 'none'
    name: Build Invitations Api
    runs-on: ubuntu-latest
    needs: [ set-release-version ]
    steps:
      - name: Check version
        shell: bash
        run: echo $SEMVER
        env:
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Run dependencies
        shell: bash
        run: |
          docker compose up -d

      - name: Restore paket packages
        id: cache-paket-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            packages
            .paket/Paket.Restore.targets
          key: ${{ runner.os }}-paket-${{ hashFiles('paket.lock', '.paket/Paket.Restore.targets') }}

      - name: Create testresults directory
        run: mkdir -p testresults

      - name: Test via docker run
        shell: bash
        run: |
          docker run --network host --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:8.0.300 /bin/sh .github/build-scripts/run-tests-docker.sh AssociationRegistry.Invitations.Api.Tests

      - name: Set solution info
        shell: bash
        run: |
          docker run --network host -e CI_BUILD_NUMBER -e GIT_HASH --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:8.0.300 /bin/sh .github/build-scripts/set-solution-info.sh
        env:
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Publish via docker run
        shell: bash
        run: |
          docker run --network host --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:8.0.300 /bin/sh .github/build-scripts/publish.sh AssociationRegistry.Invitations.Api

      - name: Build image
        shell: bash
        run: |
          .github/build-scripts/build-docker.sh AssociationRegistry.Invitations.Api invitations-api
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Show images
        shell: bash
        run: docker images

      - name: Shows logs ACM container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs acm

      - name: Shows logs elasticsearch container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs elasticsearch

      - name: Shows logs wiremock container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs wiremock

      - name: Shows logs db container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs db

  build-invitations-archiver:
    if: github.repository_owner == 'informatievlaanderen' && needs.set-release-version.outputs.version != 'none'
    name: Build Invitations Archiver
    runs-on: ubuntu-latest
    needs: [ set-release-version ]
    steps:
      - name: Check version
        shell: bash
        run: echo $SEMVER
        env:
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Run dependencies
        shell: bash
        run: |
          docker compose up -d db

      - name: Restore paket packages
        id: cache-paket-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            packages
            .paket/Paket.Restore.targets
          key: ${{ runner.os }}-paket-${{ hashFiles('paket.lock', '.paket/Paket.Restore.targets') }}

      - name: Create testresults directory
        run: mkdir -p testresults

      - name: Test via docker run
        shell: bash
        run: |
          docker run --network host --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:8.0.300 /bin/sh .github/build-scripts/run-tests-docker.sh AssociationRegistry.Invitations.Archiver.Tests

      - name: Set solution info
        shell: bash
        run: |
          docker run --network host -e CI_BUILD_NUMBER -e GIT_HASH --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:8.0.300 /bin/sh .github/build-scripts/set-solution-info.sh
        env:
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Publish via docker run
        shell: bash
        run: |
          docker run --network host --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:8.0.300 /bin/sh .github/build-scripts/publish.sh AssociationRegistry.Invitations.Archiver

      - name: Build image
        shell: bash
        run: |
          .github/build-scripts/build-docker.sh AssociationRegistry.Invitations.Archiver invitations-archiver
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Show images
        shell: bash
        run: docker images

      - name: Shows logs db container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs db

  notify-success:
    if: ${{ success() }}
    name: Notify Slack of Success
    runs-on: ubuntu-latest
    needs:
      - build-invitations-api
      - build-invitations-archiver
    steps:
      - name: Post to Slack
        id: slack
        uses: slackapi/slack-github-action@v1.21.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: ":thumbsup: VR+ Nightly build succeeded: \n
          ${{github.event.head_commit.url }} \n
          ${{format('{0}: {1}', 'build-invitations-api', needs.build-invitations-api.result) }}\n
          ${{format('{0}: {1}', 'build-invitations-archiver', needs.build-invitations-archiver.result) }}\n
          ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  notify-failure:
    if: ${{ failure() }}
    name: Notify Slack of Failure
    runs-on: ubuntu-latest
    needs:
      - build-invitations-api
      - build-invitations-archiver
    steps:
      - name: Post to Slack
        id: slack
        uses: slackapi/slack-github-action@v1.21.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a simple plain text message
          slack-message: ":thumbsdown: VR+ Nightly build failed some checks: \n
          ${{github.event.head_commit.url }} \n
          ${{format('{0}: {1}', 'build-invitations-api', needs.build-invitations-api.result) }}\n
          ${{format('{0}: {1}', 'build-invitations-archiver', needs.build-invitations-archiver.result) }}\n
          ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
