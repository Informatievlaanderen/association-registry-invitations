name: Main

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency: CI

jobs:  
  set-release-version:
    if: github.repository_owner == 'Informatievlaanderen'
    name: Decide next version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: informatievlaanderen/build-pipeline/.github/actions/setup-nodejs@main

      - name: Run Semantic Release dry-run
        shell: bash
        run: npx semantic-release --dry-run
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_COMMIT: ${{ github.sha }}
          GIT_USERNAME: ${{ secrets.VBR_GIT_USER }}
          GIT_AUTHOR_NAME: ${{ secrets.VBR_GIT_USER }}
          GIT_COMMITTER_NAME: ${{ secrets.VBR_GIT_USER }}
          GIT_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
          GIT_AUTHOR_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
          GIT_COMMITTER_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}

      - name: Set Release Version
        id: set-version
        run: |
          [ ! -f semver ] && echo none > semver
          echo "$(cat semver)"
          echo "version=$(cat semver)" >> "$GITHUB_OUTPUT"
          echo "RELEASE_VERSION=$(cat semver)" >> "$GITHUB_ENV"
        shell: bash
  
  build-invitations-api:
    if: github.repository_owner == 'informatievlaanderen' && needs.set-release-version.outputs.version != 'none'
    name: Build Invitations Api
    runs-on: ubuntu-latest
    needs: [ set-release-version ]
    steps:
      - name: Check version
        shell: bash
        run: echo "$SEMVER"
        env:
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Display disk space
        run: |
          df -h

      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Display disk space
        run: |
          df -h

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ vars.VBR_DOTNET_VERSION_8 }}

      - name: .NET version
        shell: bash
        run: dotnet --info

      - name: Clean
        run: dotnet nuget locals all --clear

      - name: Restore dotnet tools
        shell: bash
        run: |
          dotnet tool restore

      - name: Run dependencies
        shell: bash
        run: |
          docker compose up -d

      - name: Restore paket packages
        id: cache-paket-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            packages
            .paket/Paket.Restore.targets
          key: ${{ runner.os }}-paket-${{ hashFiles('paket.lock', '.paket/Paket.Restore.targets') }}

      - name: Create testresults directory
        run: mkdir -p testresults

      - name: Test via docker run
        shell: bash
        run: |
          docker run --network host --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:8.0.300 /bin/sh .github/build-scripts/run-tests-docker.sh AssociationRegistry.Invitations.Api.Tests

      - name: Set solution info
        shell: bash
        run: |
          docker run --network host -e CI_BUILD_NUMBER -e GIT_HASH=${{ github.sha }} --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:8.0.300 /bin/sh .github/build-scripts/set-solution-info.sh
        env:
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Publish via docker run
        shell: bash
        run: |
          docker run --network host --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:8.0.300 /bin/sh .github/build-scripts/publish.sh AssociationRegistry.Invitations.Api

      - name: Build image
        shell: bash
        run: |
          .github/build-scripts/build-docker.sh AssociationRegistry.Invitations.Api verenigingsregister-uitnodigingenapi
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.BUILD_DOCKER_REGISTRY_IK4 }}
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Show images
        shell: bash
        run: docker images

      - name: Save Image
        if: needs.set-release-version.outputs.version != 'none'
        shell: bash
        run: docker image save $BUILD_DOCKER_REGISTRY/verenigingsregister-uitnodigingenapi:$SEMVER -o ~/verenigingsregister-uitnodigingenapi.tar
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.BUILD_DOCKER_REGISTRY_IK4 }}
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Upload Api artifact
        if: needs.set-release-version.outputs.version != 'none'
        uses: actions/upload-artifact@v4
        with:
          name: verenigingsregister-uitnodigingenapi
          path: ~/verenigingsregister-uitnodigingenapi.tar

      - name: Shows logs ACM container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs acm

      - name: Shows logs elasticsearch container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs elasticsearch

      - name: Shows logs wiremock container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs wiremock

      - name: Shows logs db container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs db

  build-invitations-archiver:
    if: github.repository_owner == 'informatievlaanderen' && needs.set-release-version.outputs.version != 'none'
    name: Build Invitations Archiver
    runs-on: ubuntu-latest
    needs: [ set-release-version ]
    steps:
      - name: Check version
        shell: bash
        run: echo "$SEMVER"
        env:
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Run dependencies
        shell: bash
        run: |
          docker compose up -d db

      - name: Restore paket packages
        id: cache-paket-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            packages
            .paket/Paket.Restore.targets
          key: ${{ runner.os }}-paket-${{ hashFiles('paket.lock', '.paket/Paket.Restore.targets') }}

      - name: Create testresults directory
        run: mkdir -p testresults

      - name: Test via docker run
        shell: bash
        run: |
          docker run --network host --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:8.0.300 /bin/sh .github/build-scripts/run-tests-docker.sh AssociationRegistry.Invitations.Archiver.Tests

      - name: Set solution info
        shell: bash
        run: |
          docker run --network host -e CI_BUILD_NUMBER -e GIT_HASH --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:8.0.300 /bin/sh .github/build-scripts/set-solution-info.sh
        env:
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Publish via docker run
        shell: bash
        run: |
          docker run --network host --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:8.0.300 /bin/sh .github/build-scripts/publish.sh AssociationRegistry.Invitations.Archiver

      - name: Build image
        shell: bash
        run: |
          .github/build-scripts/build-docker.sh AssociationRegistry.Invitations.Archiver verenigingsregister-uitnodigingenarchiver
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.BUILD_DOCKER_REGISTRY_IK4 }}
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Show images
        shell: bash
        run: docker images

      - name: Save Image
        if: needs.set-release-version.outputs.version != 'none'
        shell: bash
        run: docker image save $BUILD_DOCKER_REGISTRY/verenigingsregister-uitnodigingenarchiver:$SEMVER -o ~/verenigingsregister-uitnodigingenarchiver.tar
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.BUILD_DOCKER_REGISTRY_IK4 }}
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Upload Archiver artifact
        if: needs.set-release-version.outputs.version != 'none'
        uses: actions/upload-artifact@v4
        with:
          name: verenigingsregister-uitnodigingenarchiver
          path: ~/verenigingsregister-uitnodigingenarchiver.tar

      - name: Shows logs db container
        if: ${{ failure() }}
        shell: bash
        run: |
          docker logs db
  
  release:
    if: needs.set-release-version.outputs.version != 'none'
    name: Semantic Release
    runs-on: ubuntu-latest
    needs:
      - build-invitations-api
      - build-invitations-archiver
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache NPM
        uses: informatievlaanderen/build-pipeline/.github/actions/cache-npm@main

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Setup NodeJS
        uses: informatievlaanderen/build-pipeline/.github/actions/setup-nodejs@main

      - name: Setup Python
        uses: informatievlaanderen/build-pipeline/.github/actions/setup-python@main

      - name: Generate Token
        id: generate_token
        run: node .github/build-scripts/generate-token.js
        env:
          APP_ID: ${{ secrets.MYBOT_APP_ID }}
          PRIVATE_KEY: ${{ secrets.MYBOT_PRIVATE_KEY }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.installationToken  }}

      - name: Install NPM dependencies
        shell: bash
        run: npm install --legacy-peer-deps

      - name: Run Semantic Release
        shell: bash
        run: npx semantic-release
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.installationToken  }}
          GIT_COMMIT: ${{ github.sha }}
          GIT_USERNAME: ${{ steps.generate_token.outputs.installationToken }}
          GIT_AUTHOR_NAME: ${{ secrets.VBR_GIT_USER }}
          GIT_COMMITTER_NAME: ${{ secrets.VBR_GIT_USER }}
          GIT_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
          GIT_AUTHOR_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
          GIT_COMMITTER_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.BUILD_DOCKER_REGISTRY_IK4 }}

      - name: Set Release Version
        id: set-version
        run: |
          [ ! -f semver ] && echo none > semver
          echo "$(cat semver)"
          echo "version=$(cat semver)" >> "$GITHUB_OUTPUT"
          echo "RELEASE_VERSION=$(cat semver)" >> "$GITHUB_ENV"
        shell: bash

  publish_to_atlassian:
    if: needs.release.outputs.version != 'none'
    needs:
      - set-release-version
      - release
    name: Publish to Atlassian
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Cache Paket
        uses: actions/cache@v4
        env:
          cache-name: cache-paket
        with:
          path: packages
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('paket.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Cache Python
        uses: actions/cache@v4
        env:
          cache-name: cache-pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install requests markdown argparse

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ vars.VBR_DOTNET_VERSION_8 }}

      - name: .NET version
        shell: bash
        run: dotnet --info

      - name: Restore dotnet tools
        shell: bash
        run: |
          dotnet tool restore

      - name: Paket install
        shell: bash
        run: dotnet paket install

      - name: Paket restore
        shell: bash
        run: dotnet paket restore

      - name: Publish to Confluence
        if: needs.set-release-version.outputs.version != 'none'
        shell: bash
        run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-confluence.sh
        env:
          CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
          CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
          CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}

      - name: Create Jira Release
        if: needs.set-release-version.outputs.version != 'none'
        shell: bash
        run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-jira.sh
        env:
          CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
          CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
          CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}
          JIRA_PREFIX: Association-Invitations
          JIRA_PROJECT: OR
          JIRA_VERSION: ${{ needs.set-release-version.outputs.version }}
  
  push_images_to_devops_ik4:
    if: needs.set-release-version.outputs.version != 'none'
    needs: [ release ]
    name: Push images to DevOps (IK4)
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials (Test)
        if: needs.release.outputs.version != 'none'
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_BUILD_USER_ACCESS_KEY_ID_IK4 }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_BUILD_USER_SECRET_ACCESS_KEY_IK4 }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR (DevOps)
        if: needs.release.outputs.version != 'none'
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download invitations-api artifact
        uses: actions/download-artifact@v4
        with:
          name: verenigingsregister-uitnodigingenapi
          path: ~/

      - name: Load invitations-api image
        shell: bash
        run: docker image load -i ~/verenigingsregister-uitnodigingenapi.tar

      - name: Download invitations-archiver artifact
        uses: actions/download-artifact@v4
        with:
          name: verenigingsregister-uitnodigingenarchiver
          path: ~/

      - name: Load invitations-archiver image
        shell: bash
        run: docker image load -i ~/verenigingsregister-uitnodigingenarchiver.tar

      - name: Push docker images to ECR DevOps
        if: needs.release.outputs.version != 'none'
        shell: bash
        run: |
          echo "$SEMVER"
          docker push $BUILD_DOCKER_REGISTRY_IK4/verenigingsregister-uitnodigingenapi:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY_IK4/verenigingsregister-uitnodigingenarchiver:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_IK4: ${{ secrets.BUILD_DOCKER_REGISTRY_IK4 }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}
  
  
  deploy_test_services_ik4:
    name: Deploy services (Test IK4)
    if: needs.release.outputs.version != 'none'
    needs: [ set-release-version, push_images_to_devops_ik4, release ]
    environment: test_ik4
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services:
          [
            'uitnodigingenapi',
          ]
    steps:
      - name: CD
        id: awscurl-polling-action
        env:
          BUILD_URL: ${{ secrets.VBR_AWS_BUILD_API }}/${{matrix.services}}/test/deploy/v4
          STATUS_URL: ${{ secrets.VBR_AWS_BUILD_STATUS_API }}/${{matrix.services}}/test/deploy/v4/status
        uses: informatievlaanderen/awscurl-polling-action/polling-action@deploy-v4
        with:
          environment: test
          version: ${{ needs.release.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_BUILD_USER_ACCESS_KEY_ID_IK4 }}
          secret-key: ${{ secrets.VBR_AWS_BUILD_USER_SECRET_ACCESS_KEY_IK4 }}
          deploy-target: 'ecs'
          domain: 'verenigingsregister'
          project: 'verenigingsregister'
          application: ${{matrix.services}}
          interval: 2
      - name: output
        shell: bash
        if: always()
        run: |
          echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
          echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
          echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deploy_test_scheduled_tasks_ik4:
    if: needs.release.outputs.version != 'none'
    needs: [ set-release-version, push_images_to_devops_ik4, release ]
    name: Deploy scheduled tasks (Test IK4)
    environment: test_ik4
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services:
          [
            'uitnodigingenarchiver',
          ]
    steps:
      - name: CD
        id: awscurl-polling-action
        env:
          BUILD_URL: ${{ secrets.VBR_AWS_BUILD_API }}/${{matrix.services}}/test/deploy/v4
          STATUS_URL: ${{ secrets.VBR_AWS_BUILD_STATUS_API }}/${{matrix.services}}/test/deploy/v4/status
        uses: informatievlaanderen/awscurl-polling-action/polling-action@deploy-v4
        with:
          environment: test
          version: ${{ needs.release.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_BUILD_USER_ACCESS_KEY_ID_IK4 }}
          secret-key: ${{ secrets.VBR_AWS_BUILD_USER_SECRET_ACCESS_KEY_IK4 }}
          domain: 'verenigingsregister'
          project: 'verenigingsregister'
          deploy-target: 'ecs'
          application: ${{matrix.services}}
          interval: 2
      - name: output
        shell: bash
        if: always()
        run: |
          echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
          echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
          echo ${{ steps.awscurl-polling-action.outputs.final-message }}
